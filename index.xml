<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UNKNWON</title>
    <link>https://unknwon.io/</link>
    <description>Recent content on UNKNWON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Nov 2018 17:16:00 -0500</lastBuildDate>
    
	<atom:link href="https://unknwon.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://unknwon.io/about/</link>
      <pubDate>Tue, 27 Nov 2018 17:16:00 -0500</pubDate>
      
      <guid>https://unknwon.io/about/</guid>
      <description>Welcome!
I&amp;rsquo;m a software engineer who emphasizes on good design and code quality.
I love using Go and did a lot work with it, some of them including:
 The Gogs project: A painless self-hosted Git service. The Macaron web framework: A high productive and modular web framework in Go. The Peach Docs tool: A web server for multi-language, real-time synchronization and searchable documentation. The go-ini/ini library: A fantastic package for INI manipulations in Go.</description>
    </item>
    
    <item>
      <title>Building a Web Server in Go</title>
      <link>https://unknwon.io/posts/180913_building_a_web_server_in_go/</link>
      <pubDate>Thu, 13 Sep 2018 16:41:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/180913_building_a_web_server_in_go/</guid>
      <description>This post was originally published on https://thenewstack.io/building-a-web-server-in-go/
 Go (Golang.org) is the system programming language that provides standard HTTP protocol support in its standard library, which makes it easy for developers to build and get a web server running very quickly. Meanwhile, Go offers developers a lot of flexibility. In this post, we lay out several ways to build an HTTP web server in Go and then offer an analysis about how and why these different approaches all work perfectly in Go.</description>
    </item>
    
    <item>
      <title>Gogs: Discord, Web Editor and Protected Branches</title>
      <link>https://unknwon.io/posts/170227_gogs-discord-web-editor-and-protected-branches/</link>
      <pubDate>Mon, 27 Feb 2017 16:41:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/170227_gogs-discord-web-editor-and-protected-branches/</guid>
      <description>This post is published corresponding to the Gogs 0.10 release.
 First things first, you may have noticed there are some notable changes to the branding of Gogs project:
 New logo: great thanks to its designer Egon Elbre. Please also take a look at his brilliant art-work of Gophers, you will love them. Simplified tagline: it is just Gogs, no Go Git Service anymore (you can still use it if that makes sense to you), and NOT GoGS (this is 100% wrong!</description>
    </item>
    
    <item>
      <title>Gogs: Pull Request, Wiki and New Design</title>
      <link>https://unknwon.io/posts/151212_gogs-pull-request-wiki-and-new-design/</link>
      <pubDate>Sat, 12 Dec 2015 22:22:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/151212_gogs-pull-request-wiki-and-new-design/</guid>
      <description>This post is published corresponding to the Gogs - Go Git Service v0.8.0 release.
 It has been over a year since last release post, mainly because there are too much work undergoing and plans are completely outdated. Fortunately, most of things finally get done in this big release.
From last post of release (v0.5.0), almost 1.8k commits with tons of improvements, bug fixes, new features and others are added to Gogs.</description>
    </item>
    
    <item>
      <title>Setup Gogs with HTTPS</title>
      <link>https://unknwon.io/posts/151115_setup-gogs-with-https/</link>
      <pubDate>Sun, 15 Nov 2015 20:15:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/151115_setup-gogs-with-https/</guid>
      <description>There are two ways to use HTTPS for Gogs based on the way you choose to deploy:
 Reverse proxy, e.g. NGINX, Caddy Expose Gogs on the internet directly  And there are two types of HTTPS certificates: real and pretend to be real.
So, let&amp;rsquo;s talk about how to get your HTTPS certificates.
Obtain HTTPS Certificates  Buy business version (OH PLEASE!!! Donate a million or two to Gogs project ðŸ˜Š) Apply free version from Let&amp;rsquo;s Encrypt or StartSSL Self-signed  You can Google (I just happened to be lazy) about how to get the first two versions of certificates.</description>
    </item>
    
    <item>
      <title>Organize your teams with Gogs organization</title>
      <link>https://unknwon.io/posts/140913_organize-your-teams-with-gogs-organization/</link>
      <pubDate>Sat, 13 Sep 2014 23:39:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/140913_organize-your-teams-with-gogs-organization/</guid>
      <description>This post is published corresponding to the Gogs - Go Git Service v0.5.0 release.
After a whole summer, we finally go from Alpha to Beta with a new release. In this release, we introduced some major features like Organization, Multiple Languages and new UI, and we&amp;rsquo;re receving contributions from more developers which make contributors of Gogs to be 55.
Please Change Log for full list of changes in this release.</description>
    </item>
    
    <item>
      <title>GoConvey - Go Testing Package: writing elegant tests</title>
      <link>https://unknwon.io/posts/140831_goconvey-go-testing-package-writing-elegant-tests/</link>
      <pubDate>Sun, 31 Aug 2014 11:55:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/140831_goconvey-go-testing-package-writing-elegant-tests/</guid>
      <description>Introduction Go comes with built-in unit test feature, and there are lots of third-party helper libraries before GoConvey was born. Unfortunately, none of them can help you write elegant test cases like GoConvey does, simple syntax and comfortable interface make you fall in love with writing unit tests.
Installation go get github.com/smartystreets/goconvey API Documentation Please visit Go Walker.
Basic Usages Write the code Following code shows an example of basic four arithmetic(Add, subtract, multiply, divide):</description>
    </item>
    
    <item>
      <title>Setup VIM for Go development</title>
      <link>https://unknwon.io/posts/140704_setup-vim-for-go-development/</link>
      <pubDate>Fri, 04 Jul 2014 18:06:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/140704_setup-vim-for-go-development/</guid>
      <description>This post is for someone like me who just get started with VIM, and because the original plugin author doesn&amp;rsquo;t given detailed steps about how to setup his awesome work, here I am.
NOTICE This is not a post about how to install Go.
VIM plugin we use: github.com/fatih/vim-go
Install Pathogen Pathogen is a plugin manager of VIM, which tons of plugins support it. So, one time forever, let&amp;rsquo;s install it.</description>
    </item>
    
    <item>
      <title>XORM - Go ORM: advanced usage</title>
      <link>https://unknwon.io/posts/140616_xorm-go-orm-advanced-usage/</link>
      <pubDate>Mon, 16 Jun 2014 10:59:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/140616_xorm-go-orm-advanced-usage/</guid>
      <description>Transaction Sample code 1
This part is based on last post XORM - Go ORM: basic guide and make some improvements in sample code. In the last post, the transfer part didn&amp;rsquo;t use transcation to make operation safe, and now it is:
// Create Session object. sess := x.NewSession() defer sess.Close() // Start transcation. if err = sess.Begin(); err != nil { return err } if _, err = sess.</description>
    </item>
    
    <item>
      <title>Use Gogs to work collaboratively</title>
      <link>https://unknwon.io/posts/140530_use-gogs-to-work-collaboratively/</link>
      <pubDate>Fri, 30 May 2014 02:20:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/140530_use-gogs-to-work-collaboratively/</guid>
      <description>This post is published corresponding to the Gogs - Go Git Service v0.4.1 release.
In the very beginning of this post, I want to speak for the develop team say sorry to all Gogs users:
 No matter if you&amp;rsquo;ve ever noticed in Trello board, we&amp;rsquo;re sorry to say that the organization feature didn&amp;rsquo;t implement in this release. This is caused by limited of team members in this period, but we&amp;rsquo;re sure about to provide this feature in 0.</description>
    </item>
    
    <item>
      <title>XORM - Go ORM: basic guide</title>
      <link>https://unknwon.io/posts/140502_xorm-go-orm-basic-guide/</link>
      <pubDate>Fri, 02 May 2014 18:54:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/140502_xorm-go-orm-basic-guide/</guid>
      <description>Introduction xorm is a Go ORM which provides rich functionality with very simple APIs. It supports all main stream databases, including MySQL, PostgreSQL, SQLite3 and MsSQL. It allows you use chain operations and combine with raw SQL statements. Moreover, it has session that supports transactions to make your business logic safe.
Installation go get github.com/go-xorm/xorm API Documentation Please visit Go Walker.
Basic Usages Sample Code
Define model You have to define model before using the ORMs in Go.</description>
    </item>
    
    <item>
      <title>Setup your private Git hosting with Gogs</title>
      <link>https://unknwon.io/posts/140420_setup-your-private-git-hosting-with-gogs/</link>
      <pubDate>Sun, 20 Apr 2014 15:53:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/140420_setup-your-private-git-hosting-with-gogs/</guid>
      <description>This post is published corresponding to the Gogs - Go Git Service v0.3.0 release.
After hard working of more than half of month, Gogs finally gets into a very important release: v0.3.0. There are couple of reasons that why I say this release is important:
 We start receiving advice and feedback from users after first public release, which makes Gogs make more improvements and less bugs. This release adds a lot of new features, including private repository, migrate or mirror repository, ship with Docker, and social account log in.</description>
    </item>
    
    <item>
      <title>Gogs: Binary is what called real deployment</title>
      <link>https://unknwon.io/posts/140331_gogs-binary-is-what-called-real-deployment/</link>
      <pubDate>Mon, 31 Mar 2014 22:16:00 -0400</pubDate>
      
      <guid>https://unknwon.io/posts/140331_gogs-binary-is-what-called-real-deployment/</guid>
      <description>Great thanks to @bketelsen for correcting grammar.
This post is also a guest post on Gopher Academy Blog.
 This post is published corresponding to the Gogs - Go Git Service v0.2.0 release.
First, please let me speak for the develop team to thank all of our friends who are supporting us on GitHub. As you may know, v0.2.0 is the first public release of Gogs, and the community has contributed over 650 stars to this project on GitHub in just one week.</description>
    </item>
    
  </channel>
</rss>